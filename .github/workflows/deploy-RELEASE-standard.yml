---
#################################
#################################
## Deploy Release Docker Image ##
#################################
#################################

#
# Documentation:
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
#

#######################################
# Start the job on all push to master #
#######################################
on:
  # Start when a release is published
  release:
    types: ['published']

###############
# Set the Job #
###############
jobs:
  deploy:
    # Name the Job
    name: Deploy Docker Image - Release - standard
    # Set the agent to run on
    runs-on: ubuntu-latest

    #####################################################################
    # Only run if Admin start job and it was the Release Issue template #
    #####################################################################
    if: ${{ github.actor }} == 'admiralawkbar' || ${{ github.actor }} == 'jwiebalk' ||
        ${{ github.actor }} == 'IAmHughes' || ${{ github.actor }} == 'nemchik' ||
        ${{ github.actor }} == 'Hanse00' || ${{ github.actor }} == 'github-actions' ||
        ${{ github.actor }} == 'GaboFDC' || ${{ github.actor }} == 'ferrarimarco'

    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v2.3.4

      #########################
      # Update deployment API #
      #########################
      - name: Start deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Release

      ########################
      # Get the current date #
      ########################
      - name: Get current date
        run: echo "BUILD_DATE=\"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\" >> ${GITHUB_ENV}"

      ########################
      # Setup Docker build X #
      ########################
      - name: Setup BuildX
        uses: docker/setup-buildx-action@v1.5.1

      ###############################
      # Login to DockerHub registry #
      ###############################
      - name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      ######################################
      # Login to GitHub Container registry #
      ######################################
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.GCR_USERNAME }}
          password: ${{ secrets.GCR_TOKEN }}
          registry: ghcr.io

      #######################################
      # Update actions.yml with new version #
      #######################################
      - name: Update actions.yml with release version and create PR
        if: success()
        run: ./.automation/update-actions-version.sh
        # Note: script creates variables:
        # PR_ID PR_REF RELEASE_VERSION COMMIT_SHA
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          RELEASE_NAME: ${{ github.event.release.name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      ################
      # Docker cache #
      ################
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-standard
          restore-keys: |
            ${{ runner.os }}-single-buildx

      ###########################################
      # Build and Push containers to registries #
      ###########################################
      - name: Build and push - Standard
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_REVISION=${{ github.sha }}
            BUILD_VERSION=${{ github.sha }}
          push: true
          tags: |
            github/super-linter:latest
            github/super-linter:v4
            "github/super-linter:${{ env.RELEASE_VERSION }}"
            ghcr.io/github/super-linter:latest
            ghcr.io/github/super-linter:v4
            "ghcr.io/github/super-linter:${{ env.RELEASE_VERSION }}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      #############
      # Fix Cache #
      #############
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      #####################################################
      # Create the Required status check for Stack Linter #
      #####################################################
      - name: Create Stack Linter Status
        if: success()
        run: |
          curl -X POST --url "https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.COMMIT_SHA }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --data '{	"state": "success",	"context": "Stack linter" }'

      #################################
      # Close the opened Pull Request #
      #################################
      - name: Close PR
        if: success()
        run: |
          curl -X PUT --url "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_ID }}/merge" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --data '{ "merge_method": "squash" }'

      #########################
      # Update Deployment API #
      #########################
      - name: Update deployment status
        uses: bobheadxi/deployments@v0.6.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://github.com/github/super-linter/releases/tag/${{ env.RELEASE_VERSION }}

      #######################################################
      # Create a GitHub Issue with the info from this build #
      #######################################################
      - name: Create GitHub Issue for failure
        if: failure()
        uses: actions/github-script@v4.1
        id: create-issue
        with:
          # https://octokit.github.io/rest.js/v18#issues-create
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const create = await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Failed to deploy release to production",
              body: "Automation has failed us! Failed to push release ${{ env.RELEASE_VERSION }}"
            })
            console.log('create', create)
            return create.data.number

      ############################
      # Assign admins on failure #
      ############################
      - name: Assign Admins on failure
        uses: actions/github-script@v4.1
        if: failure()
        with:
          # https://octokit.github.io/rest.js/v18#issues-create
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{ steps.create-issue.outputs.result }}",
              assignees: [
                'admiralawkbar',
                'jwiebalk',
                'IAmHughes',
                'nemchik',
                'Hanse00',
                'GaboFDC',
                'ferrarimarco'
              ]
            })
